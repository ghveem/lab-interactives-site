{
  "title": "Crookes Tube",
  "publicationStatus": "public",
  "labEnvironment": "production",
  "subtitle": "Simulating J.J. Thomson's discovery of the electron.",
  "category": "",
  "subCategory": "",
  "screenshot": "",
  "aspectRatio": 1.3,
  "fontScale": 1,
  "lang": "en-US",
  "i18nMetadata": "",
  "credits": "",
  "helpOnLoad": false,
  "aboutOnLoad": true,
  "about": [
    "Participate in a simulation where two electrodes are connected to a high voltage source and see them",
    " produce cathode rays. J.J. Thomson used a similar experimental set up to discover the first subatomic ",
    "particle. Based on your observations of the cathode rays, what you can determine about this stream of particles?",
    "***",
    "*This simulation was developed by [the Interactions project](https://concord.org/projects/interactions \"the Interactions Project\") ",
    "with funding from the National Science Foundation (DRL-1232388) in partnership with ",
    "[the CREATE for STEM Institute](http://create4stem.msu.edu/ \"the CREATE for STEM Institute\") at Michigan State University. To learn more, ",
    "[visit the Interactions curriculum collection](https://learn.concord.org/interactions \"visit the Interactions curriculum collection\") in ",
    "which this simulation is embedded.*"
  ],
  "theme": "",
  "showTopBar": true,
  "showBottomBar": true,
  "padding": 10,
  "models": [
    {
      "type": "md2d",
      "id": "crookesElectrodes",
      "url": "models/lab-version/1/md2d/interactions/basic-crookes-tube/crookesElectrodes.json",
      "importedFrom": "imports/legacy-mw-content/interactions/basic-crookes-tube/crookesElectrodes$0.mml",
      "onLoad": [
        "var radius = getElementProperties(0).radius,",
        "    xMax = getShapeProperties(0).x + getShapeProperties(0).width - 2*radius,",
        "    yMin = getShapeProperties(0).y + 2*radius,",
        "    yMax = yMin + getShapeProperties(0).height - 2*radius,",
        "    plateYMin = getShapeProperties(0).y + 0.2,",
        "    plateYRange = getShapeProperties(0).height - 0.4,",
        "    eFieldProps = getShapeProperties(1),",
        "    plateThickness = 0.2;",
        "setShapeProperties(0,{layer: 0});",
        "setImageProperties([1,5,9],{imageY: 2.875});",
        "setImageProperties([4,8,11],{imageY: 2.22, imageX: 2.009});",
        "setImageProperties([12,13,14,15,16,17,18,19,20,21,22], {imageX: 2.0, imageY: 2.94});",
        "addShape({",
        "  type: 'rectangle',",
        "  x: eFieldProps.x,",
        "  y: eFieldProps.y,",
        "  width: eFieldProps.width,",
        "  height: plateThickness,",
        "  color: '#f00',",
        "  lineColor: '#aaa'",
        "});",
        "addShape({",
        "  type: 'rectangle',",
        "  x: eFieldProps.x,",
        "  y: eFieldProps.y + eFieldProps.height - plateThickness,",
        "  width: eFieldProps.width,",
        "  height: plateThickness,",
        "  color: '#00f',",
        "  lineColor: '#aaa'",
        "});",
        "setElectricFieldProperties({orientation: 'S'});",
        "onPropertyChange('time',function(time){",
        "  if (time % 200 === 0) {",
        "    addAtom({",
        "      element: 0,",
        "      x: 0.5,",
        "      y: plateYMin + Math.random()*plateYRange,",
        "      vx: 0.001,",
        "      vy: 0,",
        "      charge: 0",
        "    });",
        "  }",
        "  batch(function(){",
        "    var i, props;",
        "    i = getNumberOfAtoms();",
        "    while(--i >= 0) {",
        "      props = getAtomProperties(i);",
        "      // within plates, skip it",
        "      if (props.x < 2) continue;",
        "      // absorbed by plate, remove it",
        "      if (props.x < 2.5 && (props.y > 2.175 || props.y < 1.95)) {",
        "        removeAtom(i);",
        "        continue;",
        "      }",
        "      // made it through plate but no longer inside, remove it",
        "      if (props.x > xMax || props.y < yMin || props.y > yMax) {",
        "        removeAtom(i);",
        "        continue;",
        "      }",
        "      // made it through plate, apply negative charge if needed",
        "      if (props.charge === 0) setAtomProperties(i, {charge: -0.01});",
        "    }",
        "  });",
        "});",
        "set('plateChargeProxy',3);"
      ],
      "viewOptions": {
        "controlButtons": "",
        "imageMapping": {
          "goldLeft.png": "goldLeft.svg",
          "goldOff.png": "goldOff.svg",
          "goldOn1.png": "goldOn1.svg",
          "goldOn2.png": "goldOn2.svg",
          "silverLeft.png": "silverLeft.svg",
          "silverOff.png": "silverOff.svg",
          "siverOn1.png": "silverOn1.svg",
          "silverOn2.png": "silverOn2.svg",
          "ironLeft.png": "ironLeft.svg",
          "ironOff.png": "ironOff.svg",
          "ironOn1.png": "ironOn1.svg",
          "ironOn2.png": "ironOn2.svg",
          "beamStraight.png": "beamStraight.svg",
          "beamUp1.png": "beamUp1.svg",
          "beamUp2.png": "beamUp2.svg",
          "beamUp3.png": "beamUp3.svg",
          "beamUp4.png": "beamUp4.svg",
          "beamUp5.png": "beamUp5.svg",
          "beamDown1.png": "beamDown1.svg",
          "beamDown2.png": "beamDown2.svg",
          "beamDown3.png": "beamDown3.svg",
          "beamDonw4.png": "beamDown4.svg",
          "beamDown5.png": "beamDown5.svg"
        }
      }
    }
  ],
  "propertiesToRetain": [],
  "parameters": [
    {
      "name": "batteryEnabled",
      "initialValue": false,
      "onChange": [
        "if (!value) {",
        "  setComponentDisabled('select-display',true);",
        "} else {",
        "  setComponentDisabled('select-display',false);",
        "}",
        "set('displayState',get('displayState'));"
      ]
    },
    {
      "name": "curBeamImage",
      "initialValue": 19,
      "onChange": [
        "var beamImages = [12,13,14,15,16,17,18,19,20,21,22];",
        "setImageProperties(beamImages,{visible: false});",
        "if(get('batteryEnabled') && get('displayState') == 'beam') {",
        "  setImageProperties(value,{visible: true});",
        "}"
      ]
    },
    {
      "name": "electrode",
      "initialValue": "silver",
      "onChange": [
        "//HACK trigger update of display re-using logic in batteryEnabled",
        "batch(function(){",
        "  set('batteryEnabled',!get('batteryEnabled'));",
        "  set('batteryEnabled',!get('batteryEnabled'));",
        "});"
      ]
    },
    {
      "name": "plateChargeProxy",
      "initialValue": 3,
      "onChange": [
        "var mag = Math.abs(value),",
        "    magScaled = mag * 1.75 / 10000,",
        "    s = 192-Math.round((mag/10.0)*128),",
        "    x = 192,",
        "    blue = 'rgb(' + s + ',' + s + ',' + x + ')',",
        "    red  = 'rgb(' + x + ',' + s + ',' + s + ')',",
        "    white = 'rgb(192,192,192)',",
        "    shapePropsTop    = getShapeProperties(3),",
        "    shapePropsBottom = getShapeProperties(2),",
        "    beamImage = {",
        "      '-5': 16,",
        "      '-4': 15,",
        "      '-3': 14,",
        "      '-2': 13,",
        "      '-1': 12,",
        "      '0': 22,",
        "      '1': 17,",
        "      '2': 18,",
        "      '3': 19,",
        "      '4': 20,",
        "      '5': 21",
        "    };",
        "if (!shapePropsTop.type) return;",
        "batch(function(){",
        "  set('curBeamImage',beamImage[value]);",
        "  if (value < 0) {",
        "    setImageProperties(23,{visible: true, imageY: shapePropsTop.y + shapePropsTop.height - 0.02, imageX: shapePropsTop.x + 0.05});",
        "    setImageProperties(24,{visible: true, imageY: shapePropsBottom.y + shapePropsBottom.height - 0.02, imageX: shapePropsBottom.x + 0.05});",
        "    setShapeProperties(2,{color: blue});",
        "    setShapeProperties(3,{color: red});",
        "    setElectricFieldProperties(0,{intensity: magScaled, orientation: 'N'});",
        "  } else if (value > 0) {",
        "    setImageProperties(24,{visible: true, imageY: shapePropsTop.y + shapePropsTop.height - 0.02, imageX: shapePropsTop.x + 0.05});",
        "    setImageProperties(23,{visible: true, imageY: shapePropsBottom.y + shapePropsBottom.height - 0.02, imageX: shapePropsBottom.x + 0.05});",
        "    setShapeProperties(2,{color: red});",
        "    setShapeProperties(3,{color: blue});",
        "    setElectricFieldProperties(0,{intensity: magScaled, orientation: 'S'});",
        "  } else {",
        "    setImageProperties(24,{visible: false});",
        "    setImageProperties(23,{visible: false});",
        "    setShapeProperties(2,{color: white});",
        "    setShapeProperties(3,{color: white});",
        "    setElectricFieldProperties(0,{intensity: magScaled, orientation: 'N'});",
        "  }",
        "});"
      ]
    },
    {
      "name": "displayState",
      "initialValue": "beam",
      "onChange": [
        "var turnOff = [0,1,2,3,4,5,6,7,8,9,10,11,25,26,27];",
        "var turnOn = [];",
        "if(get('batteryEnabled')){",
        "  switch(get('electrode')) {",
        "  case 'gold':",
        "    turnOn = value == 'beam' ? [1, 3, 4] : [1, 26, 4];",
        "    break;",
        "  case 'iron':",
        "    turnOn = value == 'beam' ? [5, 7, 8] : [5, 27, 8];",
        "    break;",
        "  case 'silver':",
        "  default:",
        "    turnOn = value == 'beam' ? [9, 0, 11] : [9, 25, 11];",
        "    break;",
        "  }",
        "} else {",
        "  switch(get('electrode')) {",
        "  case 'gold':",
        "    turnOn = [1, 2];",
        "    break;",
        "  case 'iron':",
        "    turnOn = [5, 6];",
        "    break;",
        "  case 'silver':",
        "  default:",
        "    turnOn = [9, 10];",
        "    break;",
        "  }",
        "}",
        "setImageProperties(turnOff,{visible: false});",
        "setImageProperties(turnOn,{visible: true});",
        "set('curBeamImage',get('curBeamImage'));",
        "if (value == 'particles' && get('batteryEnabled')) {",
        "  start();",
        "}",
        "else {",
        "  stop();",
        "  batch(function(){",
        "    var i = getNumberOfAtoms();",
        "    while(--i >= 0) {",
        "      removeAtom(i);",
        "    }",
        "  });",
        "}"
      ]
    }
  ],
  "outputs": [],
  "filteredOutputs": [],
  "helpTips": [],
  "dataSets": [],
  "components": [
    {
      "id": "select-display",
      "type": "radio",
      "style": "radio",
      "orientation": "horizontal",
      "label": "",
      "labelOn": "top",
      "options": [
        {
          "text": "Display beam",
          "action": "set('displayState','beam');",
          "selected": true
        },
        {
          "text": "Display particles",
          "action": "set('displayState','particles');"
        }
      ],
      "retainProperty": true,
      "disabled": false,
      "tooltip": "",
      "helpIcon": false
    },
    {
      "id": "enable-battery",
      "type": "checkbox",
      "text": "TURN ON by connecting high voltage to electrodes",
      "textOn": "right",
      "width": "auto",
      "height": "auto",
      "property": "batteryEnabled",
      "retainProperty": true,
      "disabled": false,
      "tooltip": "",
      "helpIcon": false
    },
    {
      "id": "select-electrode",
      "type": "pulldown",
      "label": "Select electrode metal:",
      "labelOn": "top",
      "options": [
        {
          "text": "silver",
          "value": "silver"
        },
        {
          "text": "gold",
          "value": "gold"
        },
        {
          "text": "iron",
          "value": "iron"
        }
      ],
      "property": "electrode",
      "retainProperty": true,
      "disabled": false,
      "tooltip": "",
      "helpIcon": false
    },
    {
      "id": "set-charge-on-plates",
      "type": "slider",
      "min": -5,
      "max": 5,
      "steps": 10,
      "title": "Adjust charge on horizontal plates",
      "titlePosition": "top",
      "labels": [
        {
          "value": -5,
          "label": "Very high +/-"
        },
        {
          "value": 5,
          "label": "Very high -/+"
        },
        {
          "value": 0,
          "label": "None"
        }
      ],
      "width": "60%",
      "height": "auto",
      "property": "plateChargeProxy",
      "retainProperty": true,
      "disabled": false,
      "tooltip": "",
      "helpIcon": false
    }
  ],
  "layout": {
    "bottom": [
      [
        "enable-battery"
      ],
      [
        "select-display"
      ],
      [
        "select-electrode",
        "set-charge-on-plates"
      ]
    ]
  },
  "template": "simple"
}
