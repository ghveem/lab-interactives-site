{
  "title": "Concentrating Charge and Electric Fields",
  "publicationStatus": "public",
  "labEnvironment": "production",
  "subtitle": "Understanding Rutherford's gold foil experiment.",
  "category": "",
  "subCategory": "",
  "screenshot": "",
  "aspectRatio": 1.04,
  "fontScale": 0.9,
  "lang": "en-US",
  "i18nMetadata": "",
  "credits": "",
  "helpOnLoad": false,
  "aboutOnLoad": true,
  "about": [
    "Explore how concentrating positive charge affects the electric field generated by that charge and ",
    "how that field affects the path of positive alpha particles.",
    "",
    "Run the simulation multiple times with varying degrees of charge concentrations to draw conclusions ",
    "about how the positive charge in an atom is distributed.",
    "***",
    "*This simulation was developed by [the Interactions project](https://concord.org/projects/interactions \"the Interactions Project\") ",
    "with funding from the National Science Foundation (DRL-1232388) in partnership with ",
    "[the CREATE for STEM Institute](http://create4stem.msu.edu/ \"the CREATE for STEM Institute\") at Michigan State University. To learn more, ",
    "[visit the Interactions curriculum collection](https://learn.concord.org/interactions \"visit the Interactions curriculum collection\") in ",
    "which this simulation is embedded.*"
  ],
  "theme": "",
  "showTopBar": true,
  "showBottomBar": true,
  "padding": 10,
  "models": [
    {
      "type": "md2d",
      "id": "rutherford$0",
      "url": "models/lab-version/1/md2d/interactions/rutherford-experiment/rutherford2.json",
      "importedFrom": "imports/legacy-mw-content/interactions/rutherford-experiment/rutherford$0.mml",
      "onLoad": [
        "setAtomProperties(0, {charge: 2});",
        "setElementProperties(0,{sigma: 0.14});",
        "set('atomTraceColor','yellow');",
        "set('timeStepsPerTick',60);",
        "var height  = get('height'),",
        "    alphaCharge = 0.5,",
        "    offset  = 0.3,",
        "    yBottom = offset,",
        "    yTop    = get('height') - offset,",
        "    xLeft   = offset,",
        "    xRight  = get('width') - offset,",
        "    xCenter = getAtomProperties(0).x,",
        "    yCenter = getAtomProperties(0).y,",
        "    ringOffset = 1,",
        "    ringIndex  = 0,",
        "    ringN      = 150;",
        "batch(function() {",
        "  for (var i = 0; i < ringN; i++) {",
        "    addShape({",
        "      type: 'ellipse',",
        "      x: 10, y: 10,",
        "      width: 0.015,",
        "      height: 0.015,",
        "      lineColor: '#FFDE30',",
        "      color: '#FFDE30'",
        "    });",
        "  }",
        "});",
        "onPropertyChange('time', function(time) {",
        "  batch(function() {",
        "    var y, props, dx, dy, inside,",
        "        scaledRadius = get('chargeRadius');",
        "    if( time % 900 === 0 ) {",
        "      y = offset + randomFloat() * (height - 2*offset);",
        "      addAtom({x: offset, y: y, element: 0, vx: 0.005, vy: 0, charge: alphaCharge});",
        "    }",
        "    // note atom[0] is the positive particle in the center",
        "    // and atom[1] is used as the background for the central ellipse.",
        "    // This takes advantage that the engine does not modify",
        "    // the atoms N < i when removing atom i",
        "    for (var i = getNumberOfAtoms() - 1; i > 1; i--) {",
        "      props = getAtomProperties(i);",
        "      if (props.x > xRight) {",
        "        removeAtom(i);",
        "      } else if (props.y < yBottom) {",
        "        removeAtom(i);",
        "      } else if (props.y > yTop) {",
        "        removeAtom(i);",
        "      } else if (props.x < xLeft) {",
        "        removeAtom(i);",
        "      } else {",
        "        // remove charge if within radius, or add charge back if outside again",
        "        dx = props.x - xCenter;",
        "        dy = props.y - yCenter;",
        "        inside = Math.max(Math.abs(dx),Math.abs(dy)) < scaledRadius;",
        "        if (props.charge > 0 && inside) {",
        "          setAtomProperties(i, {charge: 0});",
        "        } else if (props.charge === 0 && !inside) {",
        "          setAtomProperties(i, {charge: alphaCharge});",
        "        }",
        "      }",
        "    }",
        "  });",
        "  if (time % 60 === 0) {",
        "    batch(function(){",
        "      var props;",
        "      for (var i = 2, N = getNumberOfAtoms(); i < N; i++) {",
        "        props = getAtomProperties(i);",
        "        setShapeProperties(ringIndex + ringOffset, {x: props.x, y: props.y});",
        "        ringIndex = (ringIndex + 1) % ringN;",
        "      }",
        "    });",
        "  }",
        "});"
      ],
      "viewOptions": {
        "controlButtons": "",
        "enableKeyboardHandlers": false,
        "electricFieldDensity": 24,
        "electricFieldColor": "rgb(0,255,0)"
      }
    }
  ],
  "propertiesToRetain": [],
  "parameters": [
    {
      "name": "tbdx",
      "initialValue": [
        -0.18999999999999995,
        -1.08,
        0.52,
        0.10000000000000009,
        -0.81,
        0.5800000000000001,
        0.22999999999999998,
        -0.75,
        -0.23999999999999977
      ]
    },
    {
      "name": "tbdy",
      "initialValue": [
        -0.1299999999999999,
        -0.030000000000000027,
        0.26,
        -0.8200000000000001,
        0.76,
        -0.3599999999999999,
        0.9400000000000002,
        -0.5800000000000001,
        0.4600000000000002
      ]
    },
    {
      "name": "chargeRadius",
      "initialValue": 1.5,
      "onChange": [
        "var xCenter = getAtomProperties(0).x,",
        "    yCenter = getAtomProperties(0).y,",
        "    x = xCenter - value,",
        "    y = yCenter - value,",
        "    d = 2*value,",
        "    scale,",
        "    tbdx = get('tbdx'),",
        "    tbdy = get('tbdy');",
        "if (tbdx === undefined || tbdx.length == 0) return; // do not render before onLoad finishes",
        "batch(function(){",
        "  scale = value/1.5;",
        "console.log((1.6 - value)/1.5 + '   ' + value);",
        "  var c = 218 - Math.floor(170*(1 - scale)),",
        "      atomColor = 'rgba(0,0,255,' + (2 - value)/1.5 + ')';",
        "  setShapeProperties(0, {color: atomColor});",
        "  for (var i = 1, N = getNumberOfShapes(); i < N; i++) {",
        "    setShapeProperties(i, {x: 10, y: 10});",
        "  }",
        "  while(getNumberOfAtoms() > 9) removeAtom();",
        "  // ellipse",
        "  setShapeProperties(0,{x: x, y: y, width: d, height: d});",
        "  // central atom used as a background for ellipse (masking el. field)",
        "  setElementProperties(4, {sigma: d});",
        "  for(var i = 0; i < 9; i++) {",
        "    setTextBoxProperties(i,{",
        "      x: xCenter - 0.06 + tbdx[i] * value / 1.5 - (1 - value/1.5)*0.125,",
        "      y: yCenter + 0.04 + tbdy[i] * value / 1.5 + (1 - value/1.5)*0.125",
        "    });",
        "  }",
        "});"
      ]
    }
  ],
  "outputs": [],
  "filteredOutputs": [],
  "helpTips": [],
  "dataSets": [],
  "components": [
    {
      "id": "shoot-alpha-particles",
      "type": "button",
      "action": [
        "setComponentDisabled('select-radius',true);",
        "setComponentDisabled('shoot-alpha-particles', true);",
        "start();"
      ],
      "text": "Shoot alpha particles",
      "width": "",
      "height": "",
      "disabled": false,
      "tooltip": "",
      "helpIcon": false
    },
    {
      "id": "stop-alpha-particles",
      "type": "button",
      "action": [
        "stop();",
        "setComponentDisabled('shoot-alpha-particles', true);"
      ],
      "text": "Stop",
      "width": "",
      "height": "",
      "disabled": false,
      "tooltip": "",
      "helpIcon": false
    },
    {
      "id": "reset",
      "type": "button",
      "action": [
        "stop();",
        "reloadModel();",
        "setComponentDisabled('select-radius', false);",
        "setComponentDisabled('shoot-alpha-particles', false)"
      ],
      "text": "Reset",
      "width": "",
      "height": "",
      "disabled": false,
      "tooltip": "",
      "helpIcon": false
    },
    {
      "id": "select-radius",
      "type": "slider",
      "min": 0.1,
      "max": 1.5,
      "steps": 30,
      "title": "Set Spread of Positive Charge",
      "titlePosition": "top",
      "labels": [
        {
          "value": 0.1,
          "label": "concentrated"
        },
        {
          "value": 1.5,
          "label": "diffuse"
        }
      ],
      "width": "auto",
      "height": "auto",
      "property": "chargeRadius",
      "retainProperty": true,
      "disabled": false,
      "tooltip": "",
      "helpIcon": false
    },
    {
      "id": "select-show-electric-field",
      "type": "checkbox",
      "text": "Show field generated by positive charges",
      "textOn": "right",
      "width": "auto",
      "height": "auto",
      "property": "showElectricField",
      "retainProperty": true,
      "disabled": false,
      "tooltip": "",
      "helpIcon": false
    }
  ],
  "layout": {
    "bottom": [
      [
        "shoot-alpha-particles",
        "stop-alpha-particles",
        "reset"
      ],
      [
        "select-show-electric-field"
      ],
      [
        "select-radius"
      ]
    ]
  },
  "template": [
    {
      "id": "bottom",
      "top": "model.bottom",
      "left": "model.left",
      "width": "model.width",
      "align": "center"
    }
  ]
}
